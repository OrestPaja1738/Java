package application;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

class Asset{
	String name;
	double price;
	
	public Asset(String name,double price) {
		this.name = name;
		this.price = price;
	}
	//getters
	public String getAssetName() {
		return name;
	}
	public double getAssetPrice() {
		return price;
	}
}

class Stock extends Asset{
	double openingPrice;
	double previousClosingPrice;
	
	public Stock(String name,double price,double openingPrice,double previousClosingPrice) {
		super(name,price);
		this.openingPrice = openingPrice;
		this.previousClosingPrice = previousClosingPrice;
	}
	//getters
	public double getOpeningPrice() {
		return openingPrice;
	}
	public double getPreviousClosingPrice() {
		return previousClosingPrice;
	}
	//Volatility calculation
	public double calculateVolatility() {
		return ((openingPrice - previousClosingPrice) / previousClosingPrice) * 100;
	}
}

class Bond extends Asset{
	double interestRate;
	int maturityYears;
	
	public Bond(String name,double price,double interestRate,int maturityYears) {
		super(name,price);
		this.interestRate = interestRate;
		this.maturityYears = maturityYears;
	}
	//getters
	public double getInterestRate() {
		return interestRate;
	}
	public int getMaturityYears() {
		return maturityYears;
	}
	//Amount of interest rate that has been generated calculation method
	public double calculateGeneratedInterest() {
		return this.price * (interestRate / 100);
	}
}

public class Main extends Application {
	//Start
	ArrayList<Stock> stocksList = new ArrayList<>();
	ArrayList<Bond> bondsList = new ArrayList<>();
	
	@Override
	public void start(Stage primaryStage) {
		//Start
		GridPane stockGrid = new GridPane();
		stockGrid.setHgap(10);
        stockGrid.setVgap(10);
        
        //creating labels and text fields for stock class
        Label stockNameLabel = new Label("Stock name");
        TextField stockNameField = new TextField();
        Label stockPriceLabel = new Label("Stock price");
        TextField stockPriceField = new TextField();
        Label openingPriceLabel = new Label("Opening price");
        TextField openingPriceField = new TextField();
        Label closingPriceLabel = new Label("Previous closing price");
        TextField closingPriceField = new TextField();
        
        //setting in a grid
        stockGrid.add(stockNameLabel, 0, 0);
        stockGrid.add(stockNameField, 1, 0);
        stockGrid.add(stockPriceLabel, 0, 1);
        stockGrid.add(stockPriceField, 1, 1);
        stockGrid.add(openingPriceLabel, 0, 2);
        stockGrid.add(openingPriceField, 1, 2);
        stockGrid.add(closingPriceLabel, 0, 3);
        stockGrid.add(closingPriceField, 1, 3);
        
        //putting display labels of stock
        Label highestVolLabel = new Label("Highest Volatility");
        Label highestVolNameLabel = new Label();
        Label highestVolValueLabel = new Label();
        
        Label lowestVolLabel = new Label("Lowest Volatility");
        Label lowestVolNameLabel = new Label();
        Label lowestVolValueLabel = new Label();
        
        //setting in a grid
        stockGrid.add(highestVolLabel, 0, 4);
        stockGrid.add(highestVolNameLabel, 1, 4);
        stockGrid.add(highestVolValueLabel, 2, 4);

        stockGrid.add(lowestVolLabel, 0, 5);
        stockGrid.add(lowestVolNameLabel, 1, 5);
        stockGrid.add(lowestVolValueLabel, 2, 5);

        //Buttons for stock
        Button addStockButton = new Button("Add Stock");
        Button displayStockButton = new Button("Display");
        Button saveStockButton = new Button("Save");
        Button displayStockChartButton = new Button("Display Chart");//not utilised yet
        
        //Button functionality start
        addStockButton.setOnAction(e ->{
        	try {
        		String name = stockNameField.getText();
        		double price = Double.parseDouble(stockPriceField.getText());
        		double open = Double.parseDouble(openingPriceField.getText());
        		double close = Double.parseDouble(closingPriceField.getText());
        		stocksList.add(new Stock(name,price,open,close));
        	}
        	catch(NumberFormatException ex) {
        		System.out.println("Invalid input!");
        	}
        });
        displayStockButton.setOnAction(e->{
        	if(stocksList.isEmpty()) {
        		System.out.println("Empty stock list!");
        		return;
        	}
        	else {
        		Stock highest = stocksList.get(0);
        		for(Stock s : stocksList) {
        			if(s.calculateVolatility() > highest.calculateVolatility()) {
        				highest = s;
        			}
        		}
        		highestVolNameLabel.setText(highest.getAssetName());
        		highestVolValueLabel.setText(String.format("%.2f%%", highest.calculateVolatility()));
        	}
        });
        saveStockButton.setOnAction(e -> {
            try (PrintWriter writer = new PrintWriter(new FileWriter("stocks.txt"))) {
                for (Stock s : stocksList) {
                    writer.println(s.getAssetName() + "," + s.getAssetPrice() + "," +
                                   s.getOpeningPrice() + "," + s.getPreviousClosingPrice());
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
        //chart displaying will be completed later WIP
        
        
        HBox stockButtons = new HBox(10, addStockButton, displayStockButton, saveStockButton, displayStockChartButton);
        VBox stockSection = new VBox(10, stockGrid, stockButtons);
        
        //Bond start
        GridPane bondGrid = new GridPane();
        bondGrid.setHgap(10);
        bondGrid.setVgap(10);
        
        //creating labels and text fields for bond class
        Label bondNameLabel = new Label("Bond Name");
        TextField bondNameField = new TextField();
        Label bondPriceLabel = new Label("Bond Price");
        TextField bondPriceField = new TextField();
        Label interestRateLabel = new Label("Interest Rate");
        TextField interestRateField = new TextField();
        Label maturityYearsLabel = new Label("Maturity Years");
        TextField maturityYearsField = new TextField();
        
        //setting in a grid
        bondGrid.add(bondNameLabel, 0, 0);
        bondGrid.add(bondNameField, 1, 0);
        bondGrid.add(bondPriceLabel, 0, 1);
        bondGrid.add(bondPriceField, 1, 1);
        bondGrid.add(interestRateLabel, 0, 2);
        bondGrid.add(interestRateField, 1, 2);
        bondGrid.add(maturityYearsLabel, 0, 3);
        bondGrid.add(maturityYearsField, 1, 3);
        
        //putting display labels for bond
        Label highestInterestLabel = new Label("Highest Interest Bond");
        Label highestInterestNameField = new Label();
        Label highestInterestValueField = new Label();
        
        bondGrid.add(highestInterestLabel, 0, 4);
        bondGrid.add(highestInterestNameField, 1, 4);
        bondGrid.add(highestInterestValueField, 2, 4);
        
        // Buttons for Bond
        Button addBondButton = new Button("Add Bond");
        Button displayBondButton = new Button("Display");
        Button saveBondButton = new Button("Save");
        Button displayBondChartButton = new Button("Display Bond Chart");//not utilised yet
        
        //Button functionality start
        

        HBox bondButtons = new HBox(10, addBondButton, displayBondButton, saveBondButton, displayBondChartButton);
        VBox bondSection = new VBox(10, bondGrid, bondButtons);

        // Combine Stock and Bond Sections
        HBox mainLayout = new HBox(20, stockSection, bondSection);
        
        // Set up the scene
        Scene scene = new Scene(mainLayout, 800, 600);
        primaryStage.setTitle("Finance App");
        primaryStage.setScene(scene);
        primaryStage.show();
	}
	
	public static void main(String[] args) {
		launch(args);
	}
}